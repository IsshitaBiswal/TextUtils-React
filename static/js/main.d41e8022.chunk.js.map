{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlfor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","split","length","PropType","PropTypes","string","isRequired","defaultProps","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d41e8022.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n    <div>\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n    <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        {/* <li class=\"nav-item\">\r\n          <Link class=\"nav-link \"  to=\"/about\">About</Link>\r\n        </li> */}\r\n        \r\n      </ul>\r\n      \r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlfor=\"flexSwitchCheckDefault\"> Enable Dark Mode</label>\r\n</div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n </div>\r\n    )\r\n}\r\n\r\nNavbar.PropType = {title: PropTypes.string.isRequired}\r\n\r\n\r\n// Specifies the default values for props:\r\nNavbar.defaultProps = {\r\n    title: 'Set title here'\r\n  };\r\n  ","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleUpClick = ()=>{\r\n        //console.log(\"Uppercase was clicked\" + text);\r\n        let newText =text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to upper case!\",\"success\");\r\n        \r\n    }\r\n    \r\n    const handleLowClick = ()=>{\r\n        //console.log(\"Lowercase was clicked\" + text);\r\n        let newText =text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to lower case!\",\"success\");\r\n    }\r\n\r\n    const handleClearClick = ()=>{\r\n        let newText =\"\";\r\n        setText(newText);\r\n        props.showAlert(\"Text Cleared!\",\"success\");\r\n    }\r\n    \r\n    const handleOnChange = (event)=>{\r\n        //console.log(\"On change\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    //const handleCopy = () =>{\r\n     //   var text =document.getElementById(\"myBox\");\r\n      //  text.select();\r\n      //  navigator.clipboard.writeText(text.value);\r\n    //}\r\n\r\n    //const handleExtraSpaces = () => {\r\n    //    let newText= text.split(/[ ]+/);\r\n     //    setText(newText.join[\" \"])\r\n    //}\r\n    \r\n    const [text,setText] = useState('');\r\n    // text  = \"new text \"; //Wrong way to change the state\r\n    //setText(\"new text\");  //Correct way to change the state\r\n\r\n    return (\r\n    <>\r\n     <div className=\"container\" style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n         <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n        <textarea className=\"form-control\"  value={text} onChange={handleOnChange}  style={{backgroundColor:props.mode==='dark'?'gray':'white',color:props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"12\"></textarea>\r\n        </div>\r\n\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to UpperCase</button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleLowClick}>Convert to LowerCase</button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear the text</button>\r\n        \r\n    </div>\r\n    <div className=\"container my-3\" style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n        <h2>Your text summary</h2>\r\n        <p>{text.split(\" \").length}words and {text.length}characters</p>\r\n        <p>{0.008*text.split(\" \").length} Minutes read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:\"Enter something in the textbox above to review it here\"}</p>\r\n    </div>\r\n    </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word) =>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong>{props.alert.msg}\r\n       \r\n     </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","\nimport './App.css';\n//import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import About from './components/About';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  let [mode, setMode] = useState('light');//whether dark mode is enabled or not\n  \n   const [alert, setAlert] = useState(null)\n\n   const showAlert = (message,type) =>{\n     setAlert({\n       msg:message,\n       type:type\n     })\n     setTimeout(() => {\n       setAlert(null);\n     }, 3000);\n\n   }\n\n   const toggleMode = () =>{\n     if(mode ==='light'){\n       setMode('dark')\n       document.body.style.backgroundColor ='#042743';\n       showAlert(\"Dark Mode has been enabled\",\"success\");\n       document.title='TextUtils-Dark Mode';\n      //  setInterval(() => {\n      //   document.title='TextUtils is amazing';\n      //  },2000);\n      //  setInterval(() => {\n      //   document.title=' Download TextUtils Now';\n      //  },1500);\n     }\n     else{\n       setMode('light')\n       document.body.style.backgroundColor ='white';\n       showAlert(\"Light Mode has been enabled\",\"success\");\n       document.title='TextUtils-Light Mode';\n     }\n   }\n\n  return (\n    <>\n    {/* <Router> */}\n    <Navbar title=\"TextUtils\" mode={mode} toggleMode = {toggleMode} />\n    <Alert alert={alert}/>\n    <div className=\"container my-3\">\n    {/* <Switch> */}\n        {/* <Route exact path=\"/about\">\n            <About />\n          </Route> */}\n          {/* <Route exact path=\"/\"> */}\n          <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\"  mode={mode}/>\n        {/* </Route> */}\n    {/* </Switch> */}\n    </div>\n     {/* </Router>  */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}